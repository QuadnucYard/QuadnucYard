import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as e,c as o,b as n,d as s,e as c,w as i,f as l}from"./app-78c5cb82.js";const u="/assets/item-typename-50a629fa.png",r="/assets/effect-more-9c1f3161.png",k={},d=n("h1",{id:"ae-脚本入门-2-产生更多随机平移的重复对象",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ae-脚本入门-2-产生更多随机平移的重复对象","aria-hidden":"true"},"#"),s(" AE 脚本入门 2：产生更多随机平移的重复对象")],-1),m=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"需求"),n("p",null,[s("一个合成中放置 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"N")]),n("annotation",{encoding:"application/x-tex"},"N")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")])])]),s(" 个相同的图片素材，每个图片在随机一段时间内从左端平移到右端。")])],-1),v=l('<h2 id="根据名称获取-item" tabindex="-1"><a class="header-anchor" href="#根据名称获取-item" aria-hidden="true">#</a> 根据名称获取 item</h2><p>首先，我们要获取合成和素材，它都属于 <code>Item</code> 类。但是 AE 的 API 似乎只提供了根据下标或内置 id 获取 item，因此我们来自己实现一个 <code>findItemByName</code>。</p><p>这里有个 trick：<code>app.project</code> 和 <code>FolderItem</code> 的对象都是 ItemCollectionLike 的，即拥有 <code>items[]</code>/<code>item()</code> 获取 item 的方法和 <code>numItems</code> 属性。这样就能遍历当前集合了。</p><p>由于存在文件夹分组，需要进行递归。如何判断？API 很蠢，它把所有的 item 分成了 3 类：合成，文件夹，素材。但是没有统一的标识符来，而是用了一个本地语言相关的 <code>typeName</code> 来表示它的 i18n 命名。</p><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>不过好在它下面提供了一个样例，用正则表达式暴力判断，可以直接复制过来用。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Composition|Komposition|Composición|Composizione|コンポジション|컴포지션|Composição|Композиция|合成</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>project<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>typeName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// item is a composition</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Folder|Ordner|Carpeta|Dossier|Cartella|フォルダー|폴더|Pasta|Папка|文件夹</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>project<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>typeName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// item is a folder</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何知道当前 item 是想要的呢？用 <code>item.name</code> 判断即可。不过这样有个小问题，如果有重名就不行。所以如果想支持复杂点的查找，建议加上路径限定，如 <code>path/to/item.ext</code>。</p><p>完整代码如下：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">findItemByName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// cur: either Item or ItemCollection, which is a collection of items</span>
  <span class="token keyword">function</span> <span class="token function">impl</span><span class="token punctuation">(</span><span class="token parameter">cur<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cur<span class="token punctuation">.</span>numItems<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> it <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span>name <span class="token operator">==</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> it<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Folder|Ordner|Carpeta|Dossier|Cartella|フォルダー|폴더|Pasta|Папка|文件夹</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>typeName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">impl</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> res<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">impl</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>project<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里注意一下，图片素材是带扩展名的，比如我的素材名叫 <code>jdwl.png</code>，那么需要调用 <code>findItemByName(&quot;jdwl.png&quot;)</code>。</p><h2 id="加入图片吧" tabindex="-1"><a class="header-anchor" href="#加入图片吧" aria-hidden="true">#</a> 加入图片吧</h2><p>上一期中，我们直接使用 <code>app.project.activeItem</code> 作为当前操作的合成，这样容易误操作。现在我们有了 <code>findItemByName</code>，便可以换个方法：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">var</span> comp <span class="token operator">=</span> <span class="token function">findItemByName</span><span class="token punctuation">(</span><span class="token string">&quot;课程表&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The comp item we want</span>
<span class="token keyword">var</span> proto <span class="token operator">=</span> <span class="token function">findItemByName</span><span class="token punctuation">(</span><span class="token string">&quot;jdwl.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>考虑到操作的幂等性，操作前需要清空合成的所有图层：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">clearLayers</span><span class="token punctuation">(</span><span class="token parameter">comp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>comp<span class="token punctuation">.</span>numLayers <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    comp<span class="token punctuation">.</span><span class="token function">layer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面就是重复很多次创建图层了，相比上期没什么技术含量。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">addLayer</span><span class="token punctuation">(</span><span class="token parameter">comp<span class="token punctuation">,</span> proto</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> layer <span class="token operator">=</span> comp<span class="token punctuation">.</span>layers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> w <span class="token operator">=</span> comp<span class="token punctuation">.</span>width<span class="token punctuation">,</span>
    h <span class="token operator">=</span> comp<span class="token punctuation">.</span>height<span class="token punctuation">;</span>
  <span class="token keyword">var</span> y1 <span class="token operator">=</span> <span class="token function">randf</span><span class="token punctuation">(</span>h <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">,</span> h <span class="token operator">*</span> <span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    y2 <span class="token operator">=</span> y1 <span class="token operator">+</span> <span class="token function">randf</span><span class="token punctuation">(</span><span class="token operator">-</span>h <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">,</span> h <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Set time</span>
  layer<span class="token punctuation">.</span>inPoint <span class="token operator">=</span> <span class="token function">randf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> comp<span class="token punctuation">.</span>duration <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  layer<span class="token punctuation">.</span>outPoint <span class="token operator">=</span> layer<span class="token punctuation">.</span>inPoint <span class="token operator">+</span> <span class="token function">randf</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Set position</span>
  <span class="token function">clearKeys</span><span class="token punctuation">(</span>layer<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>
  layer<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">setValueAtTime</span><span class="token punctuation">(</span>layer<span class="token punctuation">.</span>inPoint<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span>w <span class="token operator">*</span> <span class="token number">0.15</span><span class="token punctuation">,</span> y1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  layer<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">setValueAtTime</span><span class="token punctuation">(</span>layer<span class="token punctuation">.</span>outPoint<span class="token punctuation">,</span> <span class="token punctuation">[</span>w <span class="token operator">*</span> <span class="token number">1.15</span><span class="token punctuation">,</span> y2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Set rotation</span>
  layer<span class="token punctuation">.</span>rotation<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">atan2</span><span class="token punctuation">(</span>y2 <span class="token operator">-</span> y1<span class="token punctuation">,</span> w <span class="token operator">*</span> <span class="token number">1.3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">/</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完工！最终效果如下：</p><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',20);function b(f,g){const a=p("RouterLink");return e(),o("div",null,[d,m,n("p",null,[s("本次动画内容和"),c(a,{to:"/posts/adobe/ae-scripts-beginner.html"},{default:i(()=>[s("上期")]),_:1}),s(" 其实差不多。")]),v])}const x=t(k,[["render",b],["__file","ae-scripts-beginner2.html.vue"]]);export{x as default};
