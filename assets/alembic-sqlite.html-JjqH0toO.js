import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as c,c as l,b as n,d as a,e as t,f as e}from"./app-YJ_h_pZv.js";const i={},u=e(`<h1 id="alembic-sqlite-踩坑" tabindex="-1"><a class="header-anchor" href="#alembic-sqlite-踩坑" aria-hidden="true">#</a> Alembic + SQLite 踩坑</h1><p>用 SQLAlchemy 写 ORM 时经常需要修改数据表字段，这时一般方法是手动改数据表，还可能要处理新增的 not null 字段的默认值，比较麻烦。<br> 因此我们选择 alembic 完成数据库迁移操作，快捷更新表结构。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作" aria-hidden="true">#</a> 操作</h2><p>官网有详细教程，这里说明一下我的操作过程，列一下遇到的坑。</p><h3 id="创建环境" tabindex="-1"><a class="header-anchor" href="#创建环境" aria-hidden="true">#</a> 创建环境</h3><p>假设已经用 poetry 创建好了虚拟环境。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>poetry <span class="token function">add</span> alembic
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后运行 <code>poetry shell</code> 进入虚拟环境，再输入 <code>alembic init &lt;alembic_directory&gt;</code>，如 <code>alembic init alembic</code>。<br> 会自动创建如下文件：</p><div class="language-tree line-numbers-mode" data-ext="tree"><pre class="language-tree"><code>├── alembic
│   └── env.py
└── alembic.ini
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果用的是 async sqlite，需要加额外的参数，不然迁移脚本不会用到 asyncio，导致执行失败：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>alembic init <span class="token parameter variable">-t</span> async <span class="token operator">&lt;</span>script_directory_here<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="编辑文件" tabindex="-1"><a class="header-anchor" href="#编辑文件" aria-hidden="true">#</a> 编辑文件</h3><p>在 <code>alembic.ini</code> 主要修改一个参数：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">sqlalchemy.url</span> <span class="token punctuation">=</span> <span class="token value attr-value">driver://user:pass@localhost/dbname  # 改成数据库url</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果用了 ruff，取消注释下面内容：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">hooks</span> <span class="token punctuation">=</span> <span class="token value attr-value">ruff</span>
<span class="token key attr-name">ruff.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">exec</span>
<span class="token key attr-name">ruff.executable</span> <span class="token punctuation">=</span> <span class="token value attr-value">%(here)s/.venv/bin/ruff</span>
<span class="token key attr-name">ruff.options</span> <span class="token punctuation">=</span> <span class="token value attr-value">--fix REVISION_SCRIPT_FILENAME</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 <code>env.py</code> 导入模型：</p>`,17),r=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{py:"",class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# add your model's MetaData object here"),a(`
`),n("span",{class:"token comment"},"# for 'autogenerate' support"),a(`
`),n("span",{class:"token comment"},"# from myapp import mymodel"),a(`
`),n("span",{class:"token comment"},"# target_metadata = mymodel.Base.metadata"),a(`
`),n("span",{class:"token keyword"},"from"),a(" app"),n("span",{class:"token punctuation"},"."),a("models "),n("span",{class:"token keyword"},"import"),a(` Base
target_metadata `),n("span",{class:"token operator"},"="),a(" Base"),n("span",{class:"token punctuation"},"."),a(`metadata
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," ")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),d=e(`<p>注意导入路径，若有需要可以修改 <code>sys.path</code>。</p><h3 id="创建迁移脚本" tabindex="-1"><a class="header-anchor" href="#创建迁移脚本" aria-hidden="true">#</a> 创建迁移脚本</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>alembic revision <span class="token parameter variable">--autogenerate</span> <span class="token parameter variable">-m</span> <span class="token string">&quot;Initial migration&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后会在 <code>alembic/versions/</code> 下生成对应的脚本。</p><p>打开 <code>xxxx_initial_migration.py</code>（文件名和 hash、message 有关），如果没有建表或者 ORM 跟数据库完全一致，那么 <code>upgrade</code> 和 <code>downgrade</code> 函数将是空的：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>revision<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&#39;2402cd81dacf&#39;</span>
down_revision<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>
branch_labels<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Sequence<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>
depends_on<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Sequence<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>

<span class="token keyword">def</span> <span class="token function">upgrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">def</span> <span class="token function">downgrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是我已经有数据表了，而且由于之前是手动迁移，存在不一致的地方（null constraint），所以实际内容是：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">upgrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># ### commands auto generated by Alembic - please adjust! ###</span>
    op<span class="token punctuation">.</span>alter_column<span class="token punctuation">(</span><span class="token string">&#39;food&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;images&#39;</span><span class="token punctuation">,</span>
               existing_type<span class="token operator">=</span>sa<span class="token punctuation">.</span>VARCHAR<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
               nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    op<span class="token punctuation">.</span>alter_column<span class="token punctuation">(</span><span class="token string">&#39;food&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;update_time&#39;</span><span class="token punctuation">,</span>
               existing_type<span class="token operator">=</span>sa<span class="token punctuation">.</span>DATETIME<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
               nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    op<span class="token punctuation">.</span>create_foreign_key<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">&#39;food&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;food&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;parent_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    op<span class="token punctuation">.</span>alter_column<span class="token punctuation">(</span><span class="token string">&#39;weigh&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;update_time&#39;</span><span class="token punctuation">,</span>
               existing_type<span class="token operator">=</span>sa<span class="token punctuation">.</span>DATETIME<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
               nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    <span class="token comment"># ### end Alembic commands ###</span>

<span class="token keyword">def</span> <span class="token function">downgrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># ### commands auto generated by Alembic - please adjust! ###</span>
    op<span class="token punctuation">.</span>alter_column<span class="token punctuation">(</span><span class="token string">&#39;weigh&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;update_time&#39;</span><span class="token punctuation">,</span>
               existing_type<span class="token operator">=</span>sa<span class="token punctuation">.</span>DATETIME<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
               nullable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    op<span class="token punctuation">.</span>drop_constraint<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">&#39;food&#39;</span><span class="token punctuation">,</span> type_<span class="token operator">=</span><span class="token string">&#39;foreignkey&#39;</span><span class="token punctuation">)</span>
    op<span class="token punctuation">.</span>alter_column<span class="token punctuation">(</span><span class="token string">&#39;food&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;update_time&#39;</span><span class="token punctuation">,</span>
               existing_type<span class="token operator">=</span>sa<span class="token punctuation">.</span>DATETIME<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
               nullable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    op<span class="token punctuation">.</span>alter_column<span class="token punctuation">(</span><span class="token string">&#39;food&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;images&#39;</span><span class="token punctuation">,</span>
               existing_type<span class="token operator">=</span>sa<span class="token punctuation">.</span>VARCHAR<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
               nullable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token comment"># ### end Alembic commands ###</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然内容是自动生成的，但实际上是可以手动改的，而且有些问题必须手动解决。</p><h3 id="初次迁移" tabindex="-1"><a class="header-anchor" href="#初次迁移" aria-hidden="true">#</a> 初次迁移</h3><p>在对模型进行更改（或者上面在初始化前已经有了更改）后，执行升级：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>alembic upgrade <span class="token function">head</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果没那么顺利，遇到了报错：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) near &quot;ALTER&quot;: syntax error
[SQL: ALTER TABLE food ALTER COLUMN update_time SET NOT NULL]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么呢？因为 SQLite 天生不支持修改列属性，要不然 DBMS 为啥不让改……</p><p>注释掉改 <code>NOT NULL</code> 的操作，重新执行，得到新的报错：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>NotImplementedError: No support for ALTER of constraints in SQLite dialect. Please refer to the batch mode feature which
allows for SQLite migrations using a copy-and-move strategy.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>你就说啥都做不了呗。</p><p>根据提示，修改 <code>env.py</code> 内容：</p>`,19),k=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{py:"",class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"def"),a(),n("span",{class:"token function"},"do_run_migrations"),n("span",{class:"token punctuation"},"("),a("connection"),n("span",{class:"token punctuation"},":"),a(" Connection"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),a(),n("span",{class:"token boolean"},"None"),n("span",{class:"token punctuation"},":"),a(`
    context`),n("span",{class:"token punctuation"},"."),a("configure"),n("span",{class:"token punctuation"},"("),a("connection"),n("span",{class:"token operator"},"="),a("connection"),n("span",{class:"token punctuation"},","),a(" target_metadata"),n("span",{class:"token operator"},"="),a("target_metadata"),n("span",{class:"token punctuation"},","),a(" render_as_batch"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"True"),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token comment"},"# 加上 render_as_batch=True"),a(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("div",{class:"highlight-line"}," "),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),m=n("p",null,"但是还没有用。",-1),b={href:"https://alembic.sqlalchemy.org/en/latest/batch.html",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"batch_op",-1),g=e(`<p>修改后代码如下（不需要再设 <code>render_as_batch</code>）：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">upgrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># ### commands auto generated by Alembic - please adjust! ###</span>
    <span class="token keyword">with</span> op<span class="token punctuation">.</span>batch_alter_table<span class="token punctuation">(</span><span class="token string">&quot;food&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> batch_op<span class="token punctuation">:</span>
        batch_op<span class="token punctuation">.</span>alter_column<span class="token punctuation">(</span><span class="token string">&quot;images&quot;</span><span class="token punctuation">,</span> existing_type<span class="token operator">=</span>sa<span class="token punctuation">.</span>VARCHAR<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        batch_op<span class="token punctuation">.</span>alter_column<span class="token punctuation">(</span><span class="token string">&quot;update_time&quot;</span><span class="token punctuation">,</span> existing_type<span class="token operator">=</span>sa<span class="token punctuation">.</span>DATETIME<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        batch_op<span class="token punctuation">.</span>create_foreign_key<span class="token punctuation">(</span><span class="token string">&quot;fk_food_parent&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;food&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;parent_id&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">with</span> op<span class="token punctuation">.</span>batch_alter_table<span class="token punctuation">(</span><span class="token string">&quot;weigh&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> batch_op<span class="token punctuation">:</span>
        batch_op<span class="token punctuation">.</span>alter_column<span class="token punctuation">(</span><span class="token string">&quot;update_time&quot;</span><span class="token punctuation">,</span> existing_type<span class="token operator">=</span>sa<span class="token punctuation">.</span>DATETIME<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    <span class="token comment"># ### end Alembic commands ###</span>


<span class="token keyword">def</span> <span class="token function">downgrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># ### commands auto generated by Alembic - please adjust! ###</span>
    <span class="token keyword">with</span> op<span class="token punctuation">.</span>batch_alter_table<span class="token punctuation">(</span><span class="token string">&quot;weigh&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> batch_op<span class="token punctuation">:</span>
        batch_op<span class="token punctuation">.</span>alter_column<span class="token punctuation">(</span><span class="token string">&quot;update_time&quot;</span><span class="token punctuation">,</span> existing_type<span class="token operator">=</span>sa<span class="token punctuation">.</span>DATETIME<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token keyword">with</span> op<span class="token punctuation">.</span>batch_alter_table<span class="token punctuation">(</span><span class="token string">&quot;food&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> batch_op<span class="token punctuation">:</span>
        batch_op<span class="token punctuation">.</span>drop_constraint<span class="token punctuation">(</span><span class="token string">&quot;fk_food_parent&quot;</span><span class="token punctuation">,</span> type_<span class="token operator">=</span><span class="token string">&quot;foreignkey&quot;</span><span class="token punctuation">)</span>
        batch_op<span class="token punctuation">.</span>alter_column<span class="token punctuation">(</span><span class="token string">&quot;update_time&quot;</span><span class="token punctuation">,</span> existing_type<span class="token operator">=</span>sa<span class="token punctuation">.</span>DATETIME<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        batch_op<span class="token punctuation">.</span>alter_column<span class="token punctuation">(</span><span class="token string">&quot;images&quot;</span><span class="token punctuation">,</span> existing_type<span class="token operator">=</span>sa<span class="token punctuation">.</span>VARCHAR<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token comment"># ### end Alembic commands ###</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，自动生成的代码没有给 FK constraint 命名，这是不允许的（类型提示会爆红），需要手动设一个。</p><p>为了保证健壮性，需要检验版本回退正常：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>alembic downgrade <span class="token parameter variable">-1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可能的输出：</p><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>(meal-tools-backend-py3.11) $ alembic downgrade -1
INFO  [alembic.runtime.migration] Context impl SQLiteImpl.
INFO  [alembic.runtime.migration] Will assume non-transactional DDL.
INFO  [alembic.runtime.migration] Running downgrade 2402cd81dacf -&gt; , Initial migration
(meal-tools-backend-py3.11) $ alembic upgrade head
INFO  [alembic.runtime.migration] Context impl SQLiteImpl.
INFO  [alembic.runtime.migration] Will assume non-transactional DDL.
INFO  [alembic.runtime.migration] Running upgrade  -&gt; 2402cd81dacf, Initial migration
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更新数据表" tabindex="-1"><a class="header-anchor" href="#更新数据表" aria-hidden="true">#</a> 更新数据表</h3><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>$ alembic revision --autogenerate -m &quot;Add tags&quot;
INFO  [alembic.runtime.migration] Context impl SQLiteImpl.
INFO  [alembic.runtime.migration] Will assume non-transactional DDL.
INFO  [alembic.autogenerate.compare] Detected added table &#39;tag&#39;
INFO  [alembic.autogenerate.compare] Detected added table &#39;food_tag_link&#39;
Generating E:\\Project\\meal-tools-backend\\alembic\\versions\\afe80fda900d_add_tags.py ...  done
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不加 <code>--autogenerate</code> 就不会自动生成 <code>upgrade</code> 和 <code>downgrade</code> 函数中的内容。</p><p>自动生成代码如下。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">upgrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># ### commands auto generated by Alembic - please adjust! ###</span>
    op<span class="token punctuation">.</span>create_table<span class="token punctuation">(</span><span class="token string">&#39;tag&#39;</span><span class="token punctuation">,</span>
    sa<span class="token punctuation">.</span>Column<span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> sa<span class="token punctuation">.</span>Integer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    sa<span class="token punctuation">.</span>Column<span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> sa<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    sa<span class="token punctuation">.</span>PrimaryKeyConstraint<span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    op<span class="token punctuation">.</span>create_table<span class="token punctuation">(</span><span class="token string">&#39;food_tag_link&#39;</span><span class="token punctuation">,</span>
    sa<span class="token punctuation">.</span>Column<span class="token punctuation">(</span><span class="token string">&#39;food_id&#39;</span><span class="token punctuation">,</span> sa<span class="token punctuation">.</span>Integer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    sa<span class="token punctuation">.</span>Column<span class="token punctuation">(</span><span class="token string">&#39;tag_id&#39;</span><span class="token punctuation">,</span> sa<span class="token punctuation">.</span>Integer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    sa<span class="token punctuation">.</span>ForeignKeyConstraint<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;food_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;food.id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
    sa<span class="token punctuation">.</span>ForeignKeyConstraint<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;tag_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;tag.id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
    sa<span class="token punctuation">.</span>PrimaryKeyConstraint<span class="token punctuation">(</span><span class="token string">&#39;food_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tag_id&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    <span class="token comment"># ### end Alembic commands ###</span>

<span class="token keyword">def</span> <span class="token function">downgrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># ### commands auto generated by Alembic - please adjust! ###</span>
    op<span class="token punctuation">.</span>drop_table<span class="token punctuation">(</span><span class="token string">&#39;food_tag_link&#39;</span><span class="token punctuation">)</span>
    op<span class="token punctuation">.</span>drop_table<span class="token punctuation">(</span><span class="token string">&#39;tag&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># ### end Alembic commands ###</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以尝试运行。因为不涉及列和约束操作，不需要 batch mode。</p><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>$ alembic upgrade head
INFO  [alembic.runtime.migration] Context impl SQLiteImpl.
INFO  [alembic.runtime.migration] Will assume non-transactional DDL.
INFO  [alembic.runtime.migration] Running upgrade 2402cd81dacf -&gt; afe80fda900d, Add tags
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>降级也是没问题的。</p><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>$ alembic downgrade -1
INFO  [alembic.runtime.migration] Context impl SQLiteImpl.
INFO  [alembic.runtime.migration] Will assume non-transactional DDL.
INFO  [alembic.runtime.migration] Running downgrade afe80fda900d -&gt; 2402cd81dacf, Add tags
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="再次迁移" tabindex="-1"><a class="header-anchor" href="#再次迁移" aria-hidden="true">#</a> 再次迁移</h3><p>再做一次迁移，增加时间字段，并且给 <code>name</code> 加上 <code>unique</code> 和 <code>index</code>：</p>`,18),h=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{py:"",class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"Tag"),n("span",{class:"token punctuation"},"("),a("TimeMixin"),n("span",{class:"token punctuation"},","),a(" Base"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),a(`
    `),n("span",{class:"token builtin"},"id"),n("span",{class:"token punctuation"},":"),a(" Mapped"),n("span",{class:"token punctuation"},"["),a("int_pk"),n("span",{class:"token punctuation"},"]"),a(`
    name`),n("span",{class:"token punctuation"},":"),a(" Mapped"),n("span",{class:"token punctuation"},"["),n("span",{class:"token builtin"},"str"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token operator"},"="),a(" mapped_column"),n("span",{class:"token punctuation"},"("),a("unique"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"True"),n("span",{class:"token punctuation"},","),a(" index"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"True"),n("span",{class:"token punctuation"},")"),a(`

    foods`),n("span",{class:"token punctuation"},":"),a(" Mapped"),n("span",{class:"token punctuation"},"["),n("span",{class:"token builtin"},"list"),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},'"Food"'),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token operator"},"="),a(" relationship"),n("span",{class:"token punctuation"},"("),a("secondary"),n("span",{class:"token operator"},"="),a("FoodTagLink"),n("span",{class:"token punctuation"},","),a(" back_populates"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"tags"'),n("span",{class:"token punctuation"},","),a(" lazy"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"raise"'),n("span",{class:"token punctuation"},")"),a(`
`)])]),n("div",{class:"highlight-lines"},[n("div",{class:"highlight-line"}," "),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=e(`<p>其中 <code>TimeMixin</code> 和 <code>int_pk</code> 的定义是：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>int_pk <span class="token operator">=</span> Annotated<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> mapped_column<span class="token punctuation">(</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token keyword">class</span> <span class="token class-name">TimeMixin</span><span class="token punctuation">:</span>
    create_time<span class="token punctuation">:</span> Mapped<span class="token punctuation">[</span>datetime<span class="token punctuation">]</span> <span class="token operator">=</span> mapped_column<span class="token punctuation">(</span>default<span class="token operator">=</span>func<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    update_time<span class="token punctuation">:</span> Mapped<span class="token punctuation">[</span>datetime<span class="token punctuation">]</span> <span class="token operator">=</span> mapped_column<span class="token punctuation">(</span>default<span class="token operator">=</span>func<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> onupdate<span class="token operator">=</span>func<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下：</p><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>$ alembic revision --autogenerate -m &quot;Update tag&quot;
INFO  [alembic.runtime.migration] Context impl SQLiteImpl.
INFO  [alembic.runtime.migration] Will assume non-transactional DDL.
INFO  [alembic.autogenerate.compare] Detected added column &#39;tag.create_time&#39;
INFO  [alembic.autogenerate.compare] Detected added column &#39;tag.update_time&#39;
INFO  [alembic.autogenerate.compare] Detected added index &#39;&#39;ix_tag_name&#39;&#39; on &#39;(&#39;name&#39;,)&#39;
Generating E:\\Project\\meal-tools-backend\\alembic\\versions\\1dae51f22bb2_update_tag.py ...  done
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">upgrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># ### commands auto generated by Alembic - please adjust! ###</span>
    op<span class="token punctuation">.</span>add_column<span class="token punctuation">(</span><span class="token string">&#39;tag&#39;</span><span class="token punctuation">,</span> sa<span class="token punctuation">.</span>Column<span class="token punctuation">(</span><span class="token string">&#39;create_time&#39;</span><span class="token punctuation">,</span> sa<span class="token punctuation">.</span>DateTime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    op<span class="token punctuation">.</span>add_column<span class="token punctuation">(</span><span class="token string">&#39;tag&#39;</span><span class="token punctuation">,</span> sa<span class="token punctuation">.</span>Column<span class="token punctuation">(</span><span class="token string">&#39;update_time&#39;</span><span class="token punctuation">,</span> sa<span class="token punctuation">.</span>DateTime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    op<span class="token punctuation">.</span>create_index<span class="token punctuation">(</span>op<span class="token punctuation">.</span>f<span class="token punctuation">(</span><span class="token string">&#39;ix_tag_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;tag&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token comment"># ### end Alembic commands ###</span>

<span class="token keyword">def</span> <span class="token function">downgrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># ### commands auto generated by Alembic - please adjust! ###</span>
    op<span class="token punctuation">.</span>drop_index<span class="token punctuation">(</span>op<span class="token punctuation">.</span>f<span class="token punctuation">(</span><span class="token string">&#39;ix_tag_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> table_name<span class="token operator">=</span><span class="token string">&#39;tag&#39;</span><span class="token punctuation">)</span>
    op<span class="token punctuation">.</span>drop_column<span class="token punctuation">(</span><span class="token string">&#39;tag&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;update_time&#39;</span><span class="token punctuation">)</span>
    op<span class="token punctuation">.</span>drop_column<span class="token punctuation">(</span><span class="token string">&#39;tag&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;create_time&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># ### end Alembic commands ###</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处 <code>upgrade</code> 当然是有问题的，因为新增的非空字段缺少默认值。一个解决方法是，先用 null 填上，再批量赋一个初值，最后改成 not null。这时又要用 batch mode 了。代码如下，<code>downgrade</code> 不需要更改。</p><p>需要注意，SQLite 获取当前时间用的是 <code>datetime(&#39;now&#39;)</code>（GMT+0）或 <code>datetime(&#39;now&#39;, &#39;localtime&#39;)</code>（GMT+8）。例如当前是 16:00，则前者存的时间为 8:00 而后者为 16:00。</p>`,7),y=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{py:"",class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"def"),a(),n("span",{class:"token function"},"upgrade"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),a(),n("span",{class:"token boolean"},"None"),n("span",{class:"token punctuation"},":"),a(`
    `),n("span",{class:"token comment"},"# ### commands auto generated by Alembic - please adjust! ###"),a(`
    op`),n("span",{class:"token punctuation"},"."),a("add_column"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"tag"'),n("span",{class:"token punctuation"},","),a(" sa"),n("span",{class:"token punctuation"},"."),a("Column"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"create_time"'),n("span",{class:"token punctuation"},","),a(" sa"),n("span",{class:"token punctuation"},"."),a("DateTime"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(" nullable"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"True"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),a(`
    op`),n("span",{class:"token punctuation"},"."),a("add_column"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"tag"'),n("span",{class:"token punctuation"},","),a(" sa"),n("span",{class:"token punctuation"},"."),a("Column"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"update_time"'),n("span",{class:"token punctuation"},","),a(" sa"),n("span",{class:"token punctuation"},"."),a("DateTime"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(" nullable"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"True"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),a(`
    op`),n("span",{class:"token punctuation"},"."),a("execute"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},`"UPDATE tag SET create_time = datetime('now'), update_time = datetime('now')"`),n("span",{class:"token punctuation"},")"),a(`
    op`),n("span",{class:"token punctuation"},"."),a("create_index"),n("span",{class:"token punctuation"},"("),a("op"),n("span",{class:"token punctuation"},"."),a("f"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"ix_tag_name"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token string"},'"tag"'),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},'"name"'),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),a(" unique"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"True"),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token keyword"},"with"),a(" op"),n("span",{class:"token punctuation"},"."),a("batch_alter_table"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"tag"'),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token keyword"},"as"),a(" batch_op"),n("span",{class:"token punctuation"},":"),a(`
        batch_op`),n("span",{class:"token punctuation"},"."),a("alter_column"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"create_time"'),n("span",{class:"token punctuation"},","),a(" nullable"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"False"),n("span",{class:"token punctuation"},")"),a(`
        batch_op`),n("span",{class:"token punctuation"},"."),a("alter_column"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"update_time"'),n("span",{class:"token punctuation"},","),a(" nullable"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"False"),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token comment"},"# ### end Alembic commands ###"),a(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=e(`<p>升级降级结果：</p><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>$ alembic upgrade head
INFO  [alembic.runtime.migration] Context impl SQLiteImpl.
INFO  [alembic.runtime.migration] Will assume non-transactional DDL.
INFO  [alembic.runtime.migration] Running upgrade afe80fda900d -&gt; 1dae51f22bb2, Update tag
$ alembic downgrade -1
INFO  [alembic.runtime.migration] Context impl SQLiteImpl.
INFO  [alembic.runtime.migration] Will assume non-transactional DDL.
INFO  [alembic.runtime.migration] Running downgrade 1dae51f22bb2 -&gt; afe80fda900d, Update tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="又一次迁移" tabindex="-1"><a class="header-anchor" href="#又一次迁移" aria-hidden="true">#</a> 又一次迁移</h3><p>这回增加 <code>category</code> 和 <code>color</code> 两个字段，前者可空，后者不可空但有默认值。</p>`,4),x=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{py:"",class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"Tag"),n("span",{class:"token punctuation"},"("),a("TimeMixin"),n("span",{class:"token punctuation"},","),a(" Base"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),a(`
    `),n("span",{class:"token builtin"},"id"),n("span",{class:"token punctuation"},":"),a(" Mapped"),n("span",{class:"token punctuation"},"["),a("int_pk"),n("span",{class:"token punctuation"},"]"),a(`
    name`),n("span",{class:"token punctuation"},":"),a(" Mapped"),n("span",{class:"token punctuation"},"["),n("span",{class:"token builtin"},"str"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token operator"},"="),a(" mapped_column"),n("span",{class:"token punctuation"},"("),a("unique"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"True"),n("span",{class:"token punctuation"},","),a(" index"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"True"),n("span",{class:"token punctuation"},")"),a(`
    category`),n("span",{class:"token punctuation"},":"),a(" Mapped"),n("span",{class:"token punctuation"},"["),n("span",{class:"token builtin"},"str"),a(),n("span",{class:"token operator"},"|"),a(),n("span",{class:"token boolean"},"None"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token operator"},"="),a(" mapped_column"),n("span",{class:"token punctuation"},"("),a("default"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"None"),n("span",{class:"token punctuation"},")"),a(`
    color`),n("span",{class:"token punctuation"},":"),a(" Mapped"),n("span",{class:"token punctuation"},"["),n("span",{class:"token builtin"},"str"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token operator"},"="),a(" mapped_column"),n("span",{class:"token punctuation"},"("),a("default"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"grey"'),n("span",{class:"token punctuation"},")"),a(`

    foods`),n("span",{class:"token punctuation"},":"),a(" Mapped"),n("span",{class:"token punctuation"},"["),n("span",{class:"token builtin"},"list"),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},'"Food"'),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token operator"},"="),a(" relationship"),n("span",{class:"token punctuation"},"("),a("secondary"),n("span",{class:"token operator"},"="),a("FoodTagLink"),n("span",{class:"token punctuation"},","),a(" back_populates"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"tags"'),n("span",{class:"token punctuation"},","),a(" lazy"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"raise"'),n("span",{class:"token punctuation"},")"),a(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=e(`<p>生成的代码如下，相比之前的简单不少。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">upgrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># ### commands auto generated by Alembic - please adjust! ###</span>
    op<span class="token punctuation">.</span>add_column<span class="token punctuation">(</span><span class="token string">&#39;tag&#39;</span><span class="token punctuation">,</span> sa<span class="token punctuation">.</span>Column<span class="token punctuation">(</span><span class="token string">&#39;category&#39;</span><span class="token punctuation">,</span> sa<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    op<span class="token punctuation">.</span>add_column<span class="token punctuation">(</span><span class="token string">&#39;tag&#39;</span><span class="token punctuation">,</span> sa<span class="token punctuation">.</span>Column<span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">,</span> sa<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># ### end Alembic commands ###</span>

<span class="token keyword">def</span> <span class="token function">downgrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># ### commands auto generated by Alembic - please adjust! ###</span>
    op<span class="token punctuation">.</span>drop_column<span class="token punctuation">(</span><span class="token string">&#39;tag&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;color&#39;</span><span class="token punctuation">)</span>
    op<span class="token punctuation">.</span>drop_column<span class="token punctuation">(</span><span class="token string">&#39;tag&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;category&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># ### end Alembic commands ###</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看样子没有问题，对吧？但是运行会报错如下。再仔细看看上面的 <code>upgrade</code>，并没有设置模型里的默认值。</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) Cannot add a NOT NULL column with default value NULL
[SQL: ALTER TABLE tag ADD COLUMN color VARCHAR NOT NULL]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用 <code>default</code> 是不可的，要用 <code>server_default</code>。因为在调用 <code>op.add_column</code> 时，SQLAlchemy 并不会设置用户希望的默认值，需要让数据库自己来设置 <code>server_default</code> 里的默认值。上面的数据表也需要改成。</p>`,5),N=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{py:"",class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"def"),a(),n("span",{class:"token function"},"upgrade"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),a(),n("span",{class:"token boolean"},"None"),n("span",{class:"token punctuation"},":"),a(`
    `),n("span",{class:"token comment"},"# ### commands auto generated by Alembic - please adjust! ###"),a(`
    op`),n("span",{class:"token punctuation"},"."),a("add_column"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'tag'"),n("span",{class:"token punctuation"},","),a(" sa"),n("span",{class:"token punctuation"},"."),a("Column"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'category'"),n("span",{class:"token punctuation"},","),a(" sa"),n("span",{class:"token punctuation"},"."),a("String"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(" nullable"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"True"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),a(`
    op`),n("span",{class:"token punctuation"},"."),a("add_column"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'tag'"),n("span",{class:"token punctuation"},","),a(" sa"),n("span",{class:"token punctuation"},"."),a("Column"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'color'"),n("span",{class:"token punctuation"},","),a(" sa"),n("span",{class:"token punctuation"},"."),a("String"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(" nullable"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"False"),n("span",{class:"token punctuation"},","),a(" server_default"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"grey"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token comment"},"# ### end Alembic commands ###"),a(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=n("p",null,"需要注意的是，这里的数据操作是不满足“事务”的，如果有操作执行出错，前面的操作不会撤销。",-1),T=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),a(" 参考资料")],-1),A={href:"https://alembic.sqlalchemy.org/en/latest/tutorial.html#",target:"_blank",rel:"noopener noreferrer"},I={href:"https://hellowac.github.io/alembic-doc-zh/",target:"_blank",rel:"noopener noreferrer"},F={href:"https://hellowac.github.io/alembic-doc-zh/zh/07_15_using_asyncio_with_alembic.html",target:"_blank",rel:"noopener noreferrer"},L={href:"https://fastapi.blog/blog/posts/2023-07-20-fastapi-sqlalchemy-migrations-guide/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://www.cnblogs.com/coodyz/p/14174358.html",target:"_blank",rel:"noopener noreferrer"};function E(D,C){const s=p("ExternalLinkIcon");return c(),l("div",null,[u,r,d,k,m,n("p",null,[a("最后还是参考文档 "),n("a",b,[a("https://alembic.sqlalchemy.org/en/latest/batch.html"),t(s)]),a("，手动使用 "),v,a("。本质上就是根据操作新建一张临时表，然后替换掉原表。")]),g,h,_,y,f,x,w,N,q,T,n("ol",null,[n("li",null,[a("官方文档："),n("a",A,[a("https://alembic.sqlalchemy.org/en/latest/tutorial.html#"),t(s)])]),n("li",null,[a("中文文档："),n("a",I,[a("https://hellowac.github.io/alembic-doc-zh/"),t(s)])]),n("li",null,[a("中文文档（异步）："),n("a",F,[a("https://hellowac.github.io/alembic-doc-zh/zh/07_15_using_asyncio_with_alembic.html"),t(s)])]),n("li",null,[a("某博客："),n("a",L,[a("https://fastapi.blog/blog/posts/2023-07-20-fastapi-sqlalchemy-migrations-guide/"),t(s)])]),n("li",null,[a("默认值的处理："),n("a",O,[a("https://www.cnblogs.com/coodyz/p/14174358.html"),t(s)])])])])}const R=o(i,[["render",E],["__file","alembic-sqlite.html.vue"]]);export{R as default};
