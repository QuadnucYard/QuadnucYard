import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,a as n}from"./app-N_SavQ6t.js";const e="/assets/stupid-error-BdwM-IUs.png",l={},p=n(`<h1 id="使用-vscode-xmake-llvm-开发现代-c-llvm-mingw-clangd-modules" tabindex="-1"><a class="header-anchor" href="#使用-vscode-xmake-llvm-开发现代-c-llvm-mingw-clangd-modules"><span>使用 VSCode + XMake + LLVM 开发现代 C++！（llvm-mingw + clangd + modules）</span></a></h1><p>现在已经 4202 年了，C++ 模块已经经过了长足的发展，但就模块是否得到工具支持仍然有历史遗留的争议。</p><p>本文将说明在 VSCode 下配合 XMake 和 Clangd 是可行方案，并给出指导。</p><p>先说结论，配置 <code>xmake.lua</code> 加上 <code>compile_commands.json</code> 就足够了，不需要别的操作。</p><div class="hint-container info"><p class="hint-container-title">Info</p><p>本文一些细节图文内容待补充</p></div><h2 id="环境" tabindex="-1"><a class="header-anchor" href="#环境"><span>环境</span></a></h2><p>使用 llvm-mingw：<a href="https://github.com/mstorsjo/llvm-mingw" target="_blank" rel="noopener noreferrer">https://github.com/mstorsjo/llvm-mingw</a>，版本为 19.1。编译器对标准库模块支持应当已经很充分了。</p><p>XMake：v2.9.5</p><p>VSCode 安装插件：clangd，其他 C++ 语言服务相关的<strong>均不需要</strong>。尤其是 <code>C/C++ Clang Command Adapter</code>，这玩意不仅没用还会添乱。</p><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h2><p>首先考虑最基本的模块用法，不考虑标准库和构建工具。</p><p>先看 clang 官方文档：<a href="https://clang.llvm.org/docs/StandardCPlusPlusModules.html#quick-start" target="_blank" rel="noopener noreferrer">https://clang.llvm.org/docs/StandardCPlusPlusModules.html#quick-start</a></p><p>使用文档中的示例程序：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// Hello.cppm</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Hello;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello World!</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// use.cpp</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">import Hello;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ clang++ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">-std</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">c++20</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Hello.cppm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --precompile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Hello.pcm</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ clang++ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">-std</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">c++20</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> use.cpp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -fmodule-file=Hello=Hello.pcm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Hello.pcm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Hello.out</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ ./Hello.out</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Hello World!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是可以正常运行的。</p><h2 id="加上-clangd" tabindex="-1"><a class="header-anchor" href="#加上-clangd"><span>加上 Clangd</span></a></h2><p>不幸的是 clangd 会出点问题，提示语法错误，原因是没启用对应编译命令。</p><p>解决方法：在 <code>compile_flags.txt</code> 中加上：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-xc++</span></span>
<span class="line"><span>-std=c++20</span></span>
<span class="line"><span>-stdlib=libc++</span></span>
<span class="line"><span>-fexperimental-library</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者在 <code>.clangd</code> 中加入：</p><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">CompileFlags</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  Add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">-xc++</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">-std=c++20</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">-stdlib=libc++</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">-fexperimental-library</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后重启 VSCode 的 clangd，可以看到 <code>Hello.cppm</code> 的错误已经全部消除了。</p><p>但 <code>use.cpp</code> 提示找不到模块，原因是没加入到模块搜索路径。接下来我们用构建工具一并解决这个问题</p><h2 id="使用-xmake" tabindex="-1"><a class="header-anchor" href="#使用-xmake"><span>使用 XMake</span></a></h2><p>本节参考官方文档：<a href="https://xmake.io/#/zh-cn/guide/project_examples?id=c20-%e6%a8%a1%e5%9d%97" target="_blank" rel="noopener noreferrer">https://xmake.io/#/zh-cn/guide/project_examples?id=c20-模块</a></p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add_rules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;mode.debug&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;mode.release&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;test&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    set_kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;binary&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    add_files</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;*.cpp&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;*.cppm&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    set_languages</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;c++20&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    set_policy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;build.c++.modules&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，<code>.cppm</code> 也是源代码文件一部分。如果没加入，会提示：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>error: module dependency Hello required for use.cpp not found</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>事实上因为已经有了 <code>.cppm</code> 文件，XMake 会认为这是一个模块项目，这样就不用写 <code>set_policy</code> 了。</p><p>正确编译后，输出如下：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[ 42%]: &lt;test&gt; compiling.module.debug Hello</span></span>
<span class="line"><span>[ 71%]: compiling.debug use.cpp</span></span>
<span class="line"><span>[ 85%]: linking.debug test.exe</span></span>
<span class="line"><span>[100%]: build ok, spent 1.25s</span></span>
<span class="line"><span>warning: std and std.compat modules not found ! disabling them for the build, maybe try to add --sdk=&lt;PATH/TO/LLVM&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Executing task: xmake run test</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Hello World!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里提示找不到 std modules，没关系，我们还未用到。</p><p>然后需要将 <code>.vscode/compile_commands.json</code>（若没有请使用 XMake Update Intellisense）加入到 <code>settings.json</code> 中的 clangd 参数（其他实用参数可自行添加）：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;clangd.arguments&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--compile-commands-dir=\${workspaceFolder}/.vscode&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若没有这个，<code>use.cpp</code> 里会提示找不到 <code>Hello</code> 模块。</p><p>这样，大功告成！</p><p>因为有 <code>compile_commands.json</code> 了，<code>.clangd</code> 或 <code>compile_flags.txt</code> 也不需要了。</p><h2 id="标准库模块" tabindex="-1"><a class="header-anchor" href="#标准库模块"><span>标准库模块</span></a></h2><p>下面，我们来启用标准库模块。</p><p>修改代码如下：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Hello;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">import std;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() { std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello World!</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>一开始我直接把 <code>#include</code> 行换成了 <code>import</code>，出现了如下错误：</p><figure><img src="`+e+`" alt="一个很蠢的错误" tabindex="0" loading="lazy"><figcaption>一个很蠢的错误</figcaption></figure><p>后来才知道是 <code>export module</code> 前面只能出现预处理指令。</p></div><p>按照 clang 说法是<a href="https://clang.llvm.org/docs/StandardCPlusPlusModules.html#how-to-enable-standard-c-modules" target="_blank" rel="noopener noreferrer">开箱即用</a>的，并没有给出详细使用教程。</p><p>llvm-mingw 是提供了 <code>std.cppm</code> 的，位于：<code>llvm-mingw/share/libc++/v1/std.cppm</code>。并不需要手动编译整个工具链。</p><p>但如果直接写 <code>import std</code>，会提示 <code>error: module dependency std required for Hello not found</code>。</p><p>尝试按照指导，如下编译 <code>std.pcm</code>，是可以成功的，说明库文件正常。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">clang++</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -std=c++23</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -stdlib=libc++</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --precompile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> std.pcm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;path/to/llvm-mingw/share/libc++/v1/std.cppm&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>尝试直接把 <code>std.cppm</code> 加入到编译文件中：</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add_files</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;C:/Program Files/llvm-mingw/share/libc++/v1/*.cppm&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><details class="hint-container details"><summary>很长的错误输出</summary><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[  0%]: &lt;test&gt; generating.module.deps C:\\Program Files\\llvm-mingw\\share\\libc++\\v1\\std.cppm</span></span>
<span class="line"><span>error: In file included from C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1\\\\std.cppm:222:</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/array.inc:16:22: warning: &#39;&lt;=&gt;&#39; is a single token in C++20; add a space to avoid a change in behavior [-Wc++20-compat]</span></span>
<span class="line"><span>   16 |   using std::operator&lt;=&gt;;</span></span>
<span class="line"><span>      |                      ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>In file included from C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1\\\\std.cppm:233:</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/chrono.inc:44:32: warning: &#39;&lt;=&gt;&#39; is a single token in C++20; add a space to avoid a change in behavior [-Wc++20-compat]</span></span>
<span class="line"><span>   44 |     using std::chrono::operator&lt;=&gt;;</span></span>
<span class="line"><span>      |                                ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/chrono.inc:297:51: error: invalid suffix on literal; C++11 requires a space between literal and identifier [-Wreserved-user-defined-literal]</span></span>
<span class="line"><span>  297 |   using std::literals::chrono_literals::operator&quot;&quot;d;</span></span>
<span class="line"><span>      |                                                   ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/chrono.inc:300:51: error: invalid suffix on literal; C++11 requires a space between literal and identifier [-Wreserved-user-defined-literal]</span></span>
<span class="line"><span>  300 |   using std::literals::chrono_literals::operator&quot;&quot;y;</span></span>
<span class="line"><span>      |                                                   ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>In file included from C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1\\\\std.cppm:243:</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/coroutine.inc:20:22: warning: &#39;&lt;=&gt;&#39; is a single token in C++20; add a space to avoid a change in behavior [-Wc++20-compat]</span></span>
<span class="line"><span>   20 |   using std::operator&lt;=&gt;;</span></span>
<span class="line"><span>      |                      ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>In file included from C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1\\\\std.cppm:256:</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/deque.inc:15:22: warning: &#39;&lt;=&gt;&#39; is a single token in C++20; add a space to avoid a change in behavior [-Wc++20-compat]</span></span>
<span class="line"><span>   15 |   using std::operator&lt;=&gt;;</span></span>
<span class="line"><span>      |                      ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>In file included from C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1\\\\std.cppm:264:</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/forward_list.inc:15:22: warning: &#39;&lt;=&gt;&#39; is a single token in C++20; add a space to avoid a change in behavior [-Wc++20-compat]</span></span>
<span class="line"><span>   15 |   using std::operator&lt;=&gt;;</span></span>
<span class="line"><span>      |                      ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>In file included from C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1\\\\std.cppm:276:</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/iterator.inc:166:22: warning: &#39;&lt;=&gt;&#39; is a single token in C++20; add a space to avoid a change in behavior [-Wc++20-compat]</span></span>
<span class="line"><span>  166 |   using std::operator&lt;=&gt;;</span></span>
<span class="line"><span>      |                      ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>In file included from C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1\\\\std.cppm:279:</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/list.inc:15:22: warning: &#39;&lt;=&gt;&#39; is a single token in C++20; add a space to avoid a change in behavior [-Wc++20-compat]</span></span>
<span class="line"><span>   15 |   using std::operator&lt;=&gt;;</span></span>
<span class="line"><span>      |                      ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>In file included from C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1\\\\std.cppm:281:</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/map.inc:15:22: warning: &#39;&lt;=&gt;&#39; is a single token in C++20; add a space to avoid a change in behavior [-Wc++20-compat]</span></span>
<span class="line"><span>   15 |   using std::operator&lt;=&gt;;</span></span>
<span class="line"><span>      |                      ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>In file included from C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1\\\\std.cppm:283:</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/memory.inc:132:22: warning: &#39;&lt;=&gt;&#39; is a single token in C++20; add a space to avoid a change in behavior [-Wc++20-compat]</span></span>
<span class="line"><span>  132 |   using std::operator&lt;=&gt;;</span></span>
<span class="line"><span>      |                      ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>In file included from C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1\\\\std.cppm:289:</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/optional.inc:28:22: warning: &#39;&lt;=&gt;&#39; is a single token in C++20; add a space to avoid a change in behavior [-Wc++20-compat]</span></span>
<span class="line"><span>   28 |   using std::operator&lt;=&gt;;</span></span>
<span class="line"><span>      |                      ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>In file included from C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1\\\\std.cppm:292:</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/queue.inc:20:22: warning: &#39;&lt;=&gt;&#39; is a single token in C++20; add a space to avoid a change in behavior [-Wc++20-compat]</span></span>
<span class="line"><span>   20 |   using std::operator&lt;=&gt;;</span></span>
<span class="line"><span>      |                      ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>In file included from C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1\\\\std.cppm:297:</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/regex.inc:59:22: warning: &#39;&lt;=&gt;&#39; is a single token in C++20; add a space to avoid a change in behavior [-Wc++20-compat]</span></span>
<span class="line"><span>   59 |   using std::operator&lt;=&gt;;</span></span>
<span class="line"><span>      |                      ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>In file included from C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1\\\\std.cppm:300:</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/set.inc:15:22: warning: &#39;&lt;=&gt;&#39; is a single token in C++20; add a space to avoid a change in behavior [-Wc++20-compat]</span></span>
<span class="line"><span>   15 |   using std::operator&lt;=&gt;;</span></span>
<span class="line"><span>      |                      ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>In file included from C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1\\\\std.cppm:306:</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/stack.inc:20:22: warning: &#39;&lt;=&gt;&#39; is a single token in C++20; add a space to avoid a change in behavior [-Wc++20-compat]</span></span>
<span class="line"><span>   20 |   using std::operator&lt;=&gt;;</span></span>
<span class="line"><span>      |                      ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>In file included from C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1\\\\std.cppm:312:</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/string.inc:19:22: warning: &#39;&lt;=&gt;&#39; is a single token in C++20; add a space to avoid a change in behavior [-Wc++20-compat]</span></span>
<span class="line"><span>   19 |   using std::operator&lt;=&gt;;</span></span>
<span class="line"><span>      |                      ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>In file included from C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1\\\\std.cppm:313:</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/string_view.inc:21:22: warning: &#39;&lt;=&gt;&#39; is a single token in C++20; add a space to avoid a change in behavior [-Wc++20-compat]</span></span>
<span class="line"><span>   21 |   using std::operator&lt;=&gt;;</span></span>
<span class="line"><span>      |                      ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>In file included from C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1\\\\std.cppm:316:</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/system_error.inc:34:22: warning: &#39;&lt;=&gt;&#39; is a single token in C++20; add a space to avoid a change in behavior [-Wc++20-compat]</span></span>
<span class="line"><span>   34 |   using std::operator&lt;=&gt;;</span></span>
<span class="line"><span>      |                      ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>In file included from C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1\\\\std.cppm:318:</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/thread.inc:33:22: warning: &#39;&lt;=&gt;&#39; is a single token in C++20; add a space to avoid a change in behavior [-Wc++20-compat]</span></span>
<span class="line"><span>   33 |   using std::operator&lt;=&gt;;</span></span>
<span class="line"><span>      |                      ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>In file included from C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1\\\\std.cppm:319:</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/tuple.inc:45:22: warning: &#39;&lt;=&gt;&#39; is a single token in C++20; add a space to avoid a change in behavior [-Wc++20-compat]</span></span>
<span class="line"><span>   45 |   using std::operator&lt;=&gt;;</span></span>
<span class="line"><span>      |                      ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>In file included from C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1\\\\std.cppm:325:</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/utility.inc:68:22: warning: &#39;&lt;=&gt;&#39; is a single token in C++20; add a space to avoid a change in behavior [-Wc++20-compat]</span></span>
<span class="line"><span>   68 |   using std::operator&lt;=&gt;;</span></span>
<span class="line"><span>      |                      ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>In file included from C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1\\\\std.cppm:327:</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/variant.inc:33:22: warning: &#39;&lt;=&gt;&#39; is a single token in C++20; add a space to avoid a change in behavior [-Wc++20-compat]</span></span>
<span class="line"><span>   33 |   using std::operator&lt;=&gt;;</span></span>
<span class="line"><span>      |                      ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>In file included from C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1\\\\std.cppm:328:</span></span>
<span class="line"><span>C:\\\\Program Files\\\\llvm-mingw\\\\share\\\\libc++\\\\v1/std/vector.inc:15:22: warning: &#39;&lt;=&gt;&#39; is a single token in C++20; add a space to avoid a change in behavior [-Wc++20-compat]</span></span>
<span class="line"><span>   15 |   using std::operator&lt;=&gt;;</span></span>
<span class="line"><span>      |                      ^</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>22 warnings and 2 errors generated.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>warning: std and std.compat modules not found ! disabling them for the build, maybe try to add --sdk=&lt;PATH/TO/LLVM&gt;</span></span>
<span class="line"><span>warning: add -v for getting more warnings ..</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>似乎并不可行？</p><p>事实上，自行编译是可以通过的：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">clang++</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -std=c++26</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;path/to/llvm-mingw/share/libc++/v1/std.cppm&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --precompile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> std.pcm</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">clang++</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -std=c++26</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Hello.cppm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -fmodule-file=std=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;std.pcm&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --precompile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Hello.pcm</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">clang++</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -std=c++26</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> use.cpp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -fmodule-file=Hello=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello.pcm&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -fmodule-file=std=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;std.pcm&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Hello.pcm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Hello.exe</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但 XMake 硬是说：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>error: module dependency std required for Hello not found</span></span>
<span class="line"><span>warning: std and std.compat modules not found ! disabling them for the build, maybe try to add --sdk=&lt;PATH/TO/LLVM&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>所以是 XMake 的锅？。</p><p>在一个 <a href="https://github.com/xmake-io/xmake/discussions/4854" target="_blank" rel="noopener noreferrer">discussion</a> 中我们看到，llvm 已经合并了一个必需的 pr，但 XMake 似乎还没实现对应功能。</p><h2 id="曲线救国" tabindex="-1"><a class="header-anchor" href="#曲线救国"><span>曲线救国</span></a></h2><p>考虑到，既然 <code>std</code> 编译流程和普通一样，那么我们能不能把它作为一个 target 呢？</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;std&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    set_kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;static&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    add_files</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;path/to/llvm-mingw/share/libc++/v1/*.cppm&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;test&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    set_kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;binary&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    add_files</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;*.cpp&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;*.cppm&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译，成功！虽然 warning 仍然在，但我们确实成功使用了 <code>std</code>……</p><h2 id="最终解决方案" tabindex="-1"><a class="header-anchor" href="#最终解决方案"><span>最终解决方案</span></a></h2><p>翻了一下 xmake issue，找到了这个回复：<a href="https://github.com/xmake-io/xmake/issues/5615#issuecomment-2358776939" target="_blank" rel="noopener noreferrer">https://github.com/xmake-io/xmake/issues/5615#issuecomment-2358776939</a></p><p>考虑到 llvm-mingw 是 cross 的，XMake 可能没有使用正确的那个默认平台库（只有它有 <code>std.cppm</code>），设置 runtime 也有道理。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xmake</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> f</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --runtimes=c++_shared</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（这里换成 <code>c++_static</code> 也可）</p><p>然后困扰了很久的问题成功解决……</p><p>另外可以加上自动更新 <code>compile_commands.json</code> 的 builtin plugin。</p><p>完整版本的 <code>xmake.lua</code>：</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add_rules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;mode.debug&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;mode.release&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add_rules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;plugin.compile_commands.autoupdate&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">outputdir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./.vscode&quot; </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">set_plat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;mingw&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">set_toolchains</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;clang&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">set_runtimes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;c++_static&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">set_languages</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;c++latest&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;test&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    set_kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;binary&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    add_files</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;*.cpp&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;*.cppm&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：plat、toolchain、runtime 也可在命令行设置，此处手动是为了防止乱掉。</p>`,74),t=[p];function d(r,h){return a(),i("div",null,t)}const o=s(l,[["render",d],["__file","clang-std-modules.html.vue"]]),g=JSON.parse('{"path":"/posts/cpp/clang-std-modules.html","title":"使用 VSCode + XMake + LLVM 开发现代 C++！（llvm-mingw + clangd + modules）","lang":"en-US","frontmatter":{"category":["c++","xmake","clang","vscode"],"tag":["troubleshooting"],"isOriginal":true,"description":"使用 VSCode + XMake + LLVM 开发现代 C++！（llvm-mingw + clangd + modules） 现在已经 4202 年了，C++ 模块已经经过了长足的发展，但就模块是否得到工具支持仍然有历史遗留的争议。 本文将说明在 VSCode 下配合 XMake 和 Clangd 是可行方案，并给出指导。 先说结论，配置 xma...","head":[["meta",{"property":"og:url","content":"https://QuadnucYard.github.io/posts/cpp/clang-std-modules.html"}],["meta",{"property":"og:title","content":"使用 VSCode + XMake + LLVM 开发现代 C++！（llvm-mingw + clangd + modules）"}],["meta",{"property":"og:description","content":"使用 VSCode + XMake + LLVM 开发现代 C++！（llvm-mingw + clangd + modules） 现在已经 4202 年了，C++ 模块已经经过了长足的发展，但就模块是否得到工具支持仍然有历史遗留的争议。 本文将说明在 VSCode 下配合 XMake 和 Clangd 是可行方案，并给出指导。 先说结论，配置 xma..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-09-26T03:46:14.000Z"}],["meta",{"property":"article:author","content":"Stankle of QuadnucYard"}],["meta",{"property":"article:tag","content":"troubleshooting"}],["meta",{"property":"article:modified_time","content":"2024-09-26T03:46:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用 VSCode + XMake + LLVM 开发现代 C++！（llvm-mingw + clangd + modules）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-26T03:46:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Stankle of QuadnucYard\\",\\"url\\":\\"https://github.com/QuadnucYard\\"}]}"]]},"headers":[{"level":2,"title":"环境","slug":"环境","link":"#环境","children":[]},{"level":2,"title":"基础","slug":"基础","link":"#基础","children":[]},{"level":2,"title":"加上 Clangd","slug":"加上-clangd","link":"#加上-clangd","children":[]},{"level":2,"title":"使用 XMake","slug":"使用-xmake","link":"#使用-xmake","children":[]},{"level":2,"title":"标准库模块","slug":"标准库模块","link":"#标准库模块","children":[]},{"level":2,"title":"曲线救国","slug":"曲线救国","link":"#曲线救国","children":[]},{"level":2,"title":"最终解决方案","slug":"最终解决方案","link":"#最终解决方案","children":[]}],"git":{"createdTime":1727322374000,"updatedTime":1727322374000,"contributors":[{"name":"QuadnucYard","email":"2380433991@qq.com","commits":1}]},"readingTime":{"minutes":8.18,"words":2453},"filePathRelative":"posts/cpp/clang-std-modules.md","localizedDate":"September 26, 2024","excerpt":"\\n<p>现在已经 4202 年了，C++ 模块已经经过了长足的发展，但就模块是否得到工具支持仍然有历史遗留的争议。</p>\\n<p>本文将说明在 VSCode 下配合 XMake 和 Clangd 是可行方案，并给出指导。</p>\\n<p>先说结论，配置 <code>xmake.lua</code> 加上 <code>compile_commands.json</code> 就足够了，不需要别的操作。</p>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">Info</p>\\n<p>本文一些细节图文内容待补充</p>\\n</div>","autoDesc":true}');export{o as comp,g as data};
