import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as p,c as e,f as a,b as s,d as n}from"./app-uZEI-F7F.js";const o={},l=a(`<h1 id="用-python-做个-gps-照片搜索器" tabindex="-1"><a class="header-anchor" href="#用-python-做个-gps-照片搜索器" aria-hidden="true">#</a> 用 Python 做个 GPS 照片搜索器！</h1><div class="hint-container info"><p class="hint-container-title">需求</p><p>给点 GPS 经纬度，查找给点目录下地理坐标接近的照片。</p></div><h2 id="gps-解析" tabindex="-1"><a class="header-anchor" href="#gps-解析" aria-hidden="true">#</a> GPS 解析</h2><p>现在大部分手机拍照会记录 GPS 信息（如果启用功能），该信息会被记录到 EXIF 元数据中。在 Python 可以使用 <code>exifread</code> 包来读取 EXIF 信息。一个简单的示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    exif <span class="token operator">=</span> exifread<span class="token punctuation">.</span>process_file<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里 <code>exif</code> 是一个 <code>dict</code>，value 类型为一个聚合体，包含该属性的 tag、offset 等。原始值需要通过 <code>exif[...].printble</code> 获取。</p><p>GPS 的主要属性储存在以下 4 个域中：</p><ul><li><code>&#39;GPS GPSLatitude&#39;</code>：纬度。</li><li><code>&#39;GPS GPSLatitudeRef&#39;</code>：纬度符号，为 <code>&#39;N&#39;</code> 或 <code>&#39;S&#39;</code>。</li><li><code>&#39;GPS GPSLongitude&#39;</code>：经度。</li><li><code>&#39;GPS GPSLongitudeRef&#39;</code>：经度符号，为 <code>&#39;E&#39;</code> 或 <code>&#39;W&#39;</code>。</li></ul>`,8),c=s("p",null,[n("其中经纬度的格式为 "),s("code",null,"[D, M, S1/S2]"),n("，即度分秒，表示为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"D"),s("mi",{mathvariant:"normal"},"°"),s("msup",null,[s("mi",null,"M"),s("mo",{mathvariant:"normal",lspace:"0em",rspace:"0em"},"′")]),s("msup",null,[s("mfrac",null,[s("msub",null,[s("mi",null,"S"),s("mn",null,"1")]),s("msub",null,[s("mi",null,"S"),s("mn",null,"2")])]),s("mrow",null,[s("mo",{mathvariant:"normal"},"′"),s("mo",{mathvariant:"normal"},"′")])])]),s("annotation",{encoding:"application/x-tex"},"D \\degree M'\\frac{S_1}{S_2}''")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.4753em","vertical-align":"-0.4451em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),s("span",{class:"mord"},"°"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7519em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"′")])])])])])])])]),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8884em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3173em"}},[s("span",{style:{top:"-2.357em","margin-left":"-0.0576em","margin-right":"0.0714em"}},[s("span",{class:"pstrut",style:{height:"2.5em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.143em"}},[s("span")])])])])])])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.4101em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3173em"}},[s("span",{style:{top:"-2.357em","margin-left":"-0.0576em","margin-right":"0.0714em"}},[s("span",{class:"pstrut",style:{height:"2.5em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.143em"}},[s("span")])])])])])])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.4451em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.0302em"}},[s("span",{style:{top:"-3.3413em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"′′")])])])])])])])])])])]),n("。例如："),s("code",null,"'[118, 46, 114514/125000]'"),n("。通常度和分都是整数，秒是分数，但可能有例外，度和分也是分数形式。"),s("br"),n(" 当然也有高度 "),s("code",null,"GPSAltitude"),n("，不过一般手机不会记录，这里直接忽略。")],-1),i=a(`<p>最简单的提取方式就是正则表达式了。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re

<span class="token keyword">def</span> <span class="token function">parse_gps</span><span class="token punctuation">(</span>gps<span class="token punctuation">:</span> Any<span class="token punctuation">)</span><span class="token punctuation">:</span>
    M <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r&quot;\\[(\\d+)(/(\\d+))?, (\\d+)(/(\\d+))?, (\\d+)(/(\\d+))?\\]&quot;</span><span class="token punctuation">,</span> gps<span class="token punctuation">.</span>printable<span class="token punctuation">)</span>
    <span class="token keyword">assert</span> M
    d <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>M<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>M<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">or</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>M<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>M<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token keyword">or</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    s <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>M<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>M<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">or</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> d <span class="token operator">+</span> m <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">+</span> s <span class="token operator">/</span> <span class="token number">3600</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样识别 GPS 的代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> exifread

<span class="token keyword">def</span> <span class="token function">read_gps</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> Any<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            exif <span class="token operator">=</span> exifread<span class="token punctuation">.</span>process_file<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">if</span> <span class="token string">&#39;GPS GPSLatitudeRef&#39;</span> <span class="token keyword">not</span> <span class="token keyword">in</span> exif<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    lat <span class="token operator">=</span> parse_gps<span class="token punctuation">(</span>exif<span class="token punctuation">[</span><span class="token string">&#39;GPS GPSLatitude&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">if</span> exif<span class="token punctuation">[</span><span class="token string">&#39;GPS GPSLatitudeRef&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>printable <span class="token operator">==</span> <span class="token string">&#39;N&#39;</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    lon <span class="token operator">=</span> parse_gps<span class="token punctuation">(</span>exif<span class="token punctuation">[</span><span class="token string">&#39;GPS GPSLongitude&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">if</span> exif<span class="token punctuation">[</span><span class="token string">&#39;GPS GPSLongitudeRef&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>printable <span class="token operator">==</span> <span class="token string">&#39;E&#39;</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>lat<span class="token punctuation">,</span> lon<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="经纬度距离" tabindex="-1"><a class="header-anchor" href="#经纬度距离" aria-hidden="true">#</a> 经纬度距离</h2><p>最简单的方法就是使用 <code>geopy</code> 包了，准确度也有保障。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> geopy<span class="token punctuation">.</span>distance <span class="token keyword">import</span> geodesic

dist <span class="token operator">=</span> geodesic<span class="token punctuation">(</span><span class="token punctuation">(</span>lat1<span class="token punctuation">,</span> lon1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>lat2<span class="token punctuation">,</span> lon2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Distance对象，表示两个坐标间的距离</span>
dist<span class="token punctuation">.</span>m   <span class="token comment"># 距离数值大小，单位为m</span>
dist<span class="token punctuation">.</span>km  <span class="token comment"># 距离数值大小，单位为km</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="完成搜索器" tabindex="-1"><a class="header-anchor" href="#完成搜索器" aria-hidden="true">#</a> 完成搜索器</h2><p>这步就很简单了，遍历目录读照片的 GPS，找距离上邻近的就行。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> more_itertools <span class="token keyword">import</span> ilen
<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm

<span class="token keyword">def</span> <span class="token function">find_neighbors</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">:</span> Any<span class="token punctuation">,</span>
                   anchor<span class="token punctuation">:</span> <span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                   distance<span class="token punctuation">:</span> <span class="token builtin">float</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> f <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>Path<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iterdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> total<span class="token operator">=</span>ilen<span class="token punctuation">(</span>Path<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iterdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> gps <span class="token operator">:=</span> read_gps<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> geodesic<span class="token punctuation">(</span>gps<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span><span class="token punctuation">.</span>m <span class="token operator">&lt;</span> distance<span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>

find_neighbors<span class="token punctuation">(</span><span class="token string">&quot;path/to/photos&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">32.0</span><span class="token punctuation">,</span> <span class="token number">120.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我这里处理速度大概是 350it/s。人工看了一下结果，有些照片的拍摄地距离 anchor 似乎超过了限制，可能是 GPS 记录问题？</p><p>可以考虑在 jupyter 里显示满足条件的照片。</p>`,12),u=[l,c,i];function r(d,k){return p(),e("div",null,u)}const v=t(o,[["render",r],["__file","photo-gps-search.html.vue"]]);export{v as default};
