import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as p,b as n,d as a,e,a as l,f as o}from"./app-9eb42467.js";const r="/assets/clangd-extension-a9086ec8.png",d="/assets/clangd-exe-e6164004.png",g="/assets/xmake-clangd-doc-f8aa6861.png",u="/assets/compile-commands-1-ceb7e156.png",m="/assets/clangd-restart-43d2b005.png",_="/assets/error-1-13ccde65.png",f="/assets/clangd-trouble-e8851724.png",h="/assets/error-2-6ec42572.png",k="/assets/error-3-b430815c.png",b="/assets/error-4-6de1af13.png",v="/assets/error-5-f91ff230.png",q="/assets/error-std-1-4f94e970.png",x="/assets/error-std-2-69cc05e2.png",C="/assets/error-std-3-4e43a760.png",y="/assets/error-std-4-2a82481d.png",z="/assets/error-6-0238e22d.png",M={},S=n("h1",{id:"windows-vscode-xmake-clangd-配置踩坑",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#windows-vscode-xmake-clangd-配置踩坑","aria-hidden":"true"},"#"),a(" Windows VSCode + XMake + Clangd 配置踩坑")],-1),V=n("br",null,null,-1),w={href:"https://zhuanlan.zhihu.com/p/566506467",target:"_blank",rel:"noopener noreferrer"},j=n("h2",{id:"prerequisite",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#prerequisite","aria-hidden":"true"},"#"),a(" Prerequisite")],-1),X=n("p",null,"VSCode 安装 clangd 扩展。",-1),A=n("figure",null,[n("img",{src:r,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),N=n("p",null,"如果系统没有安装 clangd 它会自己下载一个到插件共享文件目录，并且设置 clangd 的路径。",-1),E=n("figure",null,[n("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),I={href:"https://xmake.io/#/zh-cn/plugin/more_plugins?id=clangd",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"C/C++",-1),B=n("code",null,"compile-commands-dir",-1),L=o('<figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>因为 clangd 会和 C++ 扩展功能冲突，需要关闭 C/C++ 扩展功能（安装 clangd 扩展后也会提示你禁用，其实禁用 intellisense 即可）。clangd 也需要知道编译命令，这个可由 XMake 提供（编辑 <code>xmake.lua</code> 后会自动更新，如果没有则执行命令 <code>XMake: UpdateIntellisense</code> 重新生成），默认位于 <code>.vscode</code> 目录下。</p><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>需要在参数中告诉 clangd。于是得到了这样的 <code>settings.json</code>：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;C_Cpp.codeAnalysis.runAutomatically&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;C_Cpp.intelliSenseEngine&quot;</span><span class="token operator">:</span> <span class="token string">&quot;disabled&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;C_Cpp.formatting&quot;</span><span class="token operator">:</span> <span class="token string">&quot;disabled&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;C_Cpp.autoAddFileAssociations&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;C_Cpp.autocompleteAddParentheses&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;C_Cpp.autocomplete&quot;</span><span class="token operator">:</span> <span class="token string">&quot;disabled&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;C_Cpp.errorSquiggles&quot;</span><span class="token operator">:</span> <span class="token string">&quot;disabled&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;clangd.arguments&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;--compile-commands-dir=.vscode&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后打开文件夹，创建 XMake 项目（默认的 Hello World 即可），使用上述 settings。clangd 配置更新时不需要重启窗口，可以直接 <code>Ctrl+Shift+P</code> 执行命令 <code>clangd: restart language server</code>。</p><figure><img src="`+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后可能发现它显示如下问题，显然是找不到标准库头文件。</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="problems-with-gcc" tabindex="-1"><a class="header-anchor" href="#problems-with-gcc" aria-hidden="true">#</a> Problems with GCC</h2>',10),T=o('<p>对于 gcc，可能是因为没有设置 <code>--compile-commands-dir</code>。官网是这样解释的：找不到用户头文件是因为 <code>compile_commands.json</code> 路径没配置好，找不到标准库头文件则可能因为根据编译器路径搜索失败，需要手动指定 <code>query-driver</code>。</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>正常应该是这样的。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后试试 C++20，提示一堆错。这是当然的，因为 XMake 没有设置语言标准……</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>加上 <code>set_languages(&quot;c++20&quot;)</code>，重启 clangd，再执行，没有问题。</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>但是下面问题来了，我想把语言标准设为 c++23，而这个是 gcc 和 msvc 早就支持的。编译当然没问题，但是 clangd 裂了，提示 c++23 不合法……</p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>是这个版本的 clangd 不支持 c++23 标准？其实是它只认 <code>&quot;-std=c++2b&quot;</code>。需要在 <code>compile_commands.json</code> 把 <code>c++23</code> 改成 <code>c++2b</code>。但命令是 XMake 自动生成的，所以需要在 <code>xmake.lua</code> 里改 <code>set_languages(&quot;c++2b&quot;)</code>。</p><p>但这样并不意味着万事大吉。注意到它提示 <code>algorithm</code> 有问题。STL 本身肯定没编译问题的，只能是 clangd 的分析有误。</p><p><img src="'+q+'" alt="" loading="lazy"><br><img src="'+x+'" alt="" loading="lazy"><br><img src="'+C+'" alt="" loading="lazy"><br><img src="'+y+'" alt="" loading="lazy"></p><p>最后一图是 <code>auto(x)</code> 分析有误，但 clangd 在 15 就支持了 c++23 的 <code>auto(x) and auto{x}</code>，有点怪。</p><p>其实 gcc 的 libstdc++ 本来就是为自家写的，一些语法也得靠自家编译器来解析。同理 clangd 也更偏好自家的 clang。只有这么点分析失败的地方也不容易了。</p><h2 id="try-msvc" tabindex="-1"><a class="header-anchor" href="#try-msvc" aria-hidden="true">#</a> Try MSVC</h2><p>最后考虑用 msvc 编译。更新 <code>compile_commands.json</code>，重启 clangd，它又炸了。</p><figure><img src="'+z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里尝试设置 <code>query-driver</code> 也不起作用。</p><p>可能因为 MSVC 的编译命令格式和 clangd 差异太大，clangd 不识别。我尝试搜索过让 clangd 支持 MSVC 的方法无果。所以在用 clangd 的情况下还是别用 MSVC 了。</p>',20);function W(F,G){const s=c("ExternalLinkIcon");return i(),p("div",null,[S,n("p",null,[a("尝试用 Clangd 代替 Intellisense 进行实时语法检测，但是遇到了很多问题。"),V,a(" 配置基础参考了 "),n("a",w,[a("https://zhuanlan.zhihu.com/p/566506467"),e(s)]),a("。")]),j,X,A,N,E,n("p",null,[a("XMake 的官方文档提到了如何使用 clangd："),n("a",I,[a("https://xmake.io/#/zh-cn/plugin/more_plugins?id=clangd"),e(s)]),a("。只需禁用 "),P,a(" 的语法提示功能，并设置 "),B,a("。")]),L,l(" 可能是因为没有设置 `--compile-commands-dir`。昨天出现过没有把 `--query-driver` 设置成 g++ 路径导致该问题，今天未能复现。clangd 官网的 troubleshooting 有提到这个问题。 "),T])}const D=t(M,[["render",W],["__file","xmake-clangd.html.vue"]]);export{D as default};
