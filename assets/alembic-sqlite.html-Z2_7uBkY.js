const e=JSON.parse('{"key":"v-0b5d9b8b","path":"/posts/python/alembic-sqlite.html","title":"Alembic + SQLite 踩坑","lang":"en-US","frontmatter":{"category":["backend","python"],"tag":["alembic","SQLAlchemy","SQLite"],"isOriginal":true,"date":"2024-01-07T00:00:00.000Z","description":"Alembic + SQLite 踩坑 用 SQLAlchemy 写 ORM 时经常需要修改数据表字段，这时一般方法是手动改数据表，还可能要处理新增的 not null 字段的默认值，比较麻烦。 因此我们选择 alembic 完成数据库迁移操作，快捷更新表结构。 操作 官网有详细教程，这里说明一下我的操作过程，列一下遇到的坑。 创建环境 假设已经用 poetry 创建好了虚拟环境。 poetry add alembic","head":[["meta",{"property":"og:url","content":"https://QuadnucYard.github.io/posts/python/alembic-sqlite.html"}],["meta",{"property":"og:title","content":"Alembic + SQLite 踩坑"}],["meta",{"property":"og:description","content":"Alembic + SQLite 踩坑 用 SQLAlchemy 写 ORM 时经常需要修改数据表字段，这时一般方法是手动改数据表，还可能要处理新增的 not null 字段的默认值，比较麻烦。 因此我们选择 alembic 完成数据库迁移操作，快捷更新表结构。 操作 官网有详细教程，这里说明一下我的操作过程，列一下遇到的坑。 创建环境 假设已经用 poetry 创建好了虚拟环境。 poetry add alembic"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-01-08T16:09:33.000Z"}],["meta",{"property":"article:author","content":"Stankle of QuadnucYard"}],["meta",{"property":"article:tag","content":"alembic"}],["meta",{"property":"article:tag","content":"SQLAlchemy"}],["meta",{"property":"article:tag","content":"SQLite"}],["meta",{"property":"article:published_time","content":"2024-01-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-08T16:09:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Alembic + SQLite 踩坑\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-07T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-08T16:09:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Stankle of QuadnucYard\\",\\"url\\":\\"https://github.com/QuadnucYard\\"}]}"]]},"headers":[{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"创建环境","slug":"创建环境","link":"#创建环境","children":[]},{"level":3,"title":"编辑文件","slug":"编辑文件","link":"#编辑文件","children":[]},{"level":3,"title":"创建迁移脚本","slug":"创建迁移脚本","link":"#创建迁移脚本","children":[]},{"level":3,"title":"初次迁移","slug":"初次迁移","link":"#初次迁移","children":[]},{"level":3,"title":"更新数据表","slug":"更新数据表","link":"#更新数据表","children":[]},{"level":3,"title":"再次迁移","slug":"再次迁移","link":"#再次迁移","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1704644636000,"updatedTime":1704730173000,"contributors":[{"name":"QuadnucYard","email":"2380433991@qq.com","commits":2}]},"readingTime":{"minutes":5.65,"words":1695},"filePathRelative":"posts/python/alembic-sqlite.md","localizedDate":"January 7, 2024","excerpt":"<h1> Alembic + SQLite 踩坑</h1>\\n<p>用 SQLAlchemy 写 ORM 时经常需要修改数据表字段，这时一般方法是手动改数据表，还可能要处理新增的 not null 字段的默认值，比较麻烦。\\n因此我们选择 alembic 完成数据库迁移操作，快捷更新表结构。</p>\\n<h2> 操作</h2>\\n<p>官网有详细教程，这里说明一下我的操作过程，列一下遇到的坑。</p>\\n<h3> 创建环境</h3>\\n<p>假设已经用 poetry 创建好了虚拟环境。</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code>poetry <span class=\\"token function\\">add</span> alembic\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
