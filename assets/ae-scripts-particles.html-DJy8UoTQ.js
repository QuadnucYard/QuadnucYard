const e=JSON.parse('{"key":"v-268dafc5","path":"/posts/adobe/ae-scripts-particles.html","title":"AE 脚本进阶：生成大量粒子扩散","lang":"en-US","frontmatter":{"category":["AE"],"tag":["ExtendScript","tutorial"],"isOriginal":true,"date":"2023-08-21T00:00:00.000Z","description":"AE 脚本进阶：生成大量粒子扩散 Utilities? 正文前面先说个技巧。脚本如何模块化？在前两个案例中，我们写了一些辅助函数（如清空子对象、随机数）。那么，如何在多个脚本中复用呢？ 在早期的 js 中，没有模块的概念。事实上，如果有为 html 写 js 的经历，就会发现，几个 js 文件根本不需要设置依赖关系就能互相调用。这个也可以理解为，把所有代码 include 到了全局代码块。 但这个特性在 Adobe ExtendScript（AES）并不适用。直接把公共函数写在同目录其他文件中，符号并不会注入到全局命名空间被找到。AES 提供了一个模块化的方法：","head":[["meta",{"property":"og:url","content":"https://QuadnucYard.github.io/posts/adobe/ae-scripts-particles.html"}],["meta",{"property":"og:title","content":"AE 脚本进阶：生成大量粒子扩散"}],["meta",{"property":"og:description","content":"AE 脚本进阶：生成大量粒子扩散 Utilities? 正文前面先说个技巧。脚本如何模块化？在前两个案例中，我们写了一些辅助函数（如清空子对象、随机数）。那么，如何在多个脚本中复用呢？ 在早期的 js 中，没有模块的概念。事实上，如果有为 html 写 js 的经历，就会发现，几个 js 文件根本不需要设置依赖关系就能互相调用。这个也可以理解为，把所有代码 include 到了全局代码块。 但这个特性在 Adobe ExtendScript（AES）并不适用。直接把公共函数写在同目录其他文件中，符号并不会注入到全局命名空间被找到。AES 提供了一个模块化的方法："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-08-21T09:25:44.000Z"}],["meta",{"property":"article:author","content":"Stankle of QuadnucYard"}],["meta",{"property":"article:tag","content":"ExtendScript"}],["meta",{"property":"article:tag","content":"tutorial"}],["meta",{"property":"article:published_time","content":"2023-08-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-21T09:25:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"AE 脚本进阶：生成大量粒子扩散\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-21T00:00:00.000Z\\",\\"dateModified\\":\\"2023-08-21T09:25:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Stankle of QuadnucYard\\",\\"url\\":\\"https://github.com/QuadnucYard\\"}]}"]]},"headers":[{"level":2,"title":"Utilities?","slug":"utilities","link":"#utilities","children":[]},{"level":2,"title":"Shape! Shape!","slug":"shape-shape","link":"#shape-shape","children":[]},{"level":2,"title":"World of Properties","slug":"world-of-properties","link":"#world-of-properties","children":[]},{"level":2,"title":"More Shapes!","slug":"more-shapes","link":"#more-shapes","children":[]},{"level":2,"title":"Electron Cloud","slug":"electron-cloud","link":"#electron-cloud","children":[]}],"git":{"createdTime":1692609944000,"updatedTime":1692609944000,"contributors":[{"name":"QuadnucYard","email":"2380433991@qq.com","commits":1}]},"readingTime":{"minutes":13.87,"words":4161},"filePathRelative":"posts/adobe/ae-scripts-particles.md","localizedDate":"August 21, 2023","excerpt":"<h1> AE 脚本进阶：生成大量粒子扩散</h1>\\n<h2> Utilities?</h2>\\n<p>正文前面先说个技巧。脚本如何模块化？在前两个案例中，我们写了一些辅助函数（如清空子对象、随机数）。那么，如何在多个脚本中复用呢？</p>\\n<p>在早期的 js 中，没有模块的概念。事实上，如果有为 html 写 js 的经历，就会发现，几个 js 文件根本不需要设置依赖关系就能互相调用。这个也可以理解为，把所有代码 include 到了全局代码块。</p>\\n<p>但这个特性在 Adobe ExtendScript（AES）并不适用。直接把公共函数写在同目录其他文件中，符号并不会注入到全局命名空间被找到。AES 提供了一个模块化的方法：</p>","autoDesc":true}');export{e as data};
