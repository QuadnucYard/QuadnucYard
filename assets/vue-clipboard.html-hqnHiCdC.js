import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as n,f as s}from"./app-SLluY_-8.js";const o={},c=s(`<h1 id="科学地在-vue3-使用剪贴板" tabindex="-1"><a class="header-anchor" href="#科学地在-vue3-使用剪贴板" aria-hidden="true">#</a> 科学地在 Vue3 使用剪贴板</h1><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> i vue-clipboard3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>后缀 3 表示它是适用于 Vue3 setup 的，使用<code>useXXX</code>而非 <code>this.xxx</code> 的方式使用。</p><h2 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h2><p>核心 3 行代码如下，不需要在其他地方 <code>use</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> useClipboard <span class="token keyword">from</span> <span class="token string">&quot;vue-clipboard3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> toClipboard <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useClipboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这个函数是返回值的唯一成员</span>
<span class="token keyword">await</span> <span class="token function">toClipboard</span><span class="token punctuation">(</span>someString<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>element</code> 是一个 <code>HTMLElement</code> 对象，在 Vue 中可以用 <code>someRef.value.$el</code> 来获取。</p><p>根据源码， <code>toClipboard</code> 的原理是，在 container 里创建一个 fake 按钮，点击这个按钮后将一个 fake 文本框里的文本粘到剪贴板里（这步是 <code>clipboard.js</code> 实现的）。 通常情况下，并不需要传入第2个参数，默认为 <code>document.body</code>。但有一种情况例外：打开了模态窗口。在这种情况下，点击事件会被屏蔽，创建在 <code>document.body</code> 的 fake 按钮的模拟点击被挡住，这样就会无法成功复制。这时就需要传入第 2 个参数，它可以是模态窗口内用户可以点击的任何元素。这样就没有问题了。</p>`,9),t=[c];function d(p,i){return a(),n("div",null,t)}const u=e(o,[["render",d],["__file","vue-clipboard.html.vue"]]);export{u as default};
